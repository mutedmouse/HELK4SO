# HELK dst-ip-cleanups filter conf
# HELK build Stage: Alpha
# Author: Nate Guagenti (@neu5ron)
# License: GPL-3.0

filter {
    #TONOTE: On all IPs below, even though we have determined that it is IPv4 and IPv6 and will alter rename the field if it is an IPv6 address differently than IPv4 -- We still need to keep it as that single field for this configuration -- because sometimes a single IP type can already have both IPv6 and IPv4 from before -- examples are Cisco ASA Logs and Windows EventID "4769" in Channel "Security"

    if [dst_ip_addr] {
        # Add pipeline field
        mutate { add_field => { "z_logstash_pipeline" => "8012" } }
        ruby {
            code => "
                temp_ip_addresses = event.get('dst_ip_addr')
                ip_addresses = Array.new

                # Determine if the IP field is an array if not make it an array
                if temp_ip_addresses.is_a? Enumerable
                    ip_addresses = temp_ip_addresses.uniq
                else
                    ip_addresses.push(temp_ip_addresses)
                end

                clean_ip_addresses_v4 = Array.new
                clean_ip_addresses_v6 = Array.new
                not_ip_addresses = Array.new
                
                ipv6_regex = /((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?/

                for ip_address in ip_addresses
                    #### General Cleanup
                    # Remove ending '.'
                    ip_address = ip_address.chomp
                    # Remove preceeding '.'# Don't ask.. reverse + chomp + reverse up to 16 times faster
                    ip_address = ip_address.reverse.chomp('.').reverse
                    # Remove ending or beginning whitespace
                    ip_address = ip_address.lstrip.rstrip
                    # Remove things that would make an IP a share but we want the IP :)
                    ip_address = ip_address.gsub(/^\\:?/, '')
                    # Downcase/lowercase for checking if possible ipv6
                    ip_address = ip_address.downcase
                    
                    # Likely IPv4 #Check if at most 15 characters (a fully represented IPv4 address with periods\.) and minimum of 7
                    ip_address_length = ip_address.length
                    if !ip_address.include?(':') && !( /[a-z]/ === ip_address ) && ip_address_length <= 15 && ip_address_length >= 7 && ip_address.ascii_only?
                        # Remove any preceeding zeroes in each octet
                        temp_ip = Array.new
                        ip_address.split('.').each do |octet|
                            octet = octet.to_i.to_s
                            temp_ip.push(octet)
                        end
                        ip_address = temp_ip.join('.')
                        clean_ip_addresses_v4.push(ip_address)
                    
                    # Likely IPv6 #Check if at most 39 characters (a fully represented IPv6 address with colons\:) and minimum of 2
                    elsif ip_address_length <= 39 && ip_address_length >= 2 && ip_address.ascii_only?
                        if ipv6_regex === ip_address
                            clean_ip_addresses_v6.push(ip_address)
                        else
                            not_ip_addresses.push(ip_address)
                        end
                    else
                        not_ip_addresses.push(ip_address)
                    end
                end

                # Set the new IP addresses
                if !clean_ip_addresses_v4.empty?
                    event.set('dst_ip_addr', clean_ip_addresses_v4)
                    # Set the number of ip addresses so we can use array or non array later in pipeline
                    event.set('temp_number_of_ipv4_dst_addresses', clean_ip_addresses_v4.length)
                else
                    event.remove('dst_ip_addr')
                end
                if !clean_ip_addresses_v6.empty?
                    event.set('ipv6_dst_addr', clean_ip_addresses_v6)
                    #TODO:eventually set ipv6 number of ip addresses
                end
                if !not_ip_addresses.empty?
                    event.set('not_ip_dst', not_ip_addresses)
                end
            "
            tag_on_exception =>  "_rubyexception_8012"
        }
    }
}